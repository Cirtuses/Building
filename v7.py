# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'v7.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import time
import sys
import os
import csv
import time
import execute
import pandas as pd
import numpy as np
import subprocess


from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QCoreApplication, QThread, pyqtSignal
from PyQt5.QtWidgets import *
#from dumbDialog import DumbDialog

xlsx_filename = "database_v2.xlsx"


class Ui_MainWindow(QMainWindow):
    def __init__(self):
            super().__init__()
            self.setupUi(self)
            self.retranslateUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1401, 973)
        MainWindow.setAcceptDrops(False)
        MainWindow.setStyleSheet("background:rgb(255, 255, 255)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget_top = QtWidgets.QWidget(self.centralwidget)
        self.widget_top.setStyleSheet("background:rgb(127, 127, 127)\n"
"")
        self.widget_top.setObjectName("widget_top")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_top)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.label_13 = QtWidgets.QLabel(self.widget_top)
        self.label_13.setText("")
        self.label_13.setPixmap(QtGui.QPixmap("icon/建筑.svg"))
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_3.addWidget(self.label_13)
        spacerItem1 = QtWidgets.QSpacerItem(293, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.label = QtWidgets.QLabel(self.widget_top)
        self.label.setStyleSheet("color:rgb(255, 255, 255);\n"
"font: 18pt \"Arial\";")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        spacerItem2 = QtWidgets.QSpacerItem(589, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.horizontalLayout_3.setStretch(1, 1)
        self.horizontalLayout_3.setStretch(2, 8)
        self.horizontalLayout_3.setStretch(3, 8)
        self.horizontalLayout_3.setStretch(4, 16)
        self.verticalLayout.addWidget(self.widget_top)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.listWidget_0 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_0.setStyleSheet("background:rgb(0, 170, 255);\n"
"font: 9pt \"Arial\";")
        self.listWidget_0.setObjectName("listWidget_0")
        item = QtWidgets.QListWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setBackground(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        self.listWidget_0.addItem(item)
        item = QtWidgets.QListWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        self.listWidget_0.addItem(item)
        item = QtWidgets.QListWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        self.listWidget_0.addItem(item)
        item = QtWidgets.QListWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        self.listWidget_0.addItem(item)
        item = QtWidgets.QListWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.NoBrush)
        item.setForeground(brush)
        self.listWidget_0.addItem(item)
        self.horizontalLayout_2.addWidget(self.listWidget_0)
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setAcceptDrops(True)
        self.stackedWidget.setAutoFillBackground(False)
        self.stackedWidget.setStyleSheet("background:rgb(255, 255, 255)")
        self.stackedWidget.setObjectName("stackedWidget")
        self.page_0 = QtWidgets.QWidget()
        self.page_0.setObjectName("page_0")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.page_0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.title_label = QtWidgets.QLabel(self.page_0)
        self.title_label.setStyleSheet("font: 63 9pt \"Segoe UI Semibold\";")
        self.title_label.setObjectName("title_label")
        self.verticalLayout_2.addWidget(self.title_label)
        self.stackedWidget.addWidget(self.page_0)
        self.page_1 = QtWidgets.QWidget()
        self.page_1.setObjectName("page_1")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.page_1)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.question_label_0 = QtWidgets.QLabel(self.page_1)
        self.question_label_0.setStyleSheet("font: 63 9pt \"Segoe UI Semibold\";")
        self.question_label_0.setObjectName("question_label_0")
        self.verticalLayout_8.addWidget(self.question_label_0)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.my_radioButton_3 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_3.setObjectName("my_radioButton_3")
        self.buttonGroup = QtWidgets.QButtonGroup(MainWindow)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.my_radioButton_3)
        self.gridLayout_2.addWidget(self.my_radioButton_3, 3, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.page_1)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 3, 0, 1, 1)
        self.my_radioButton_1 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_1.setObjectName("my_radioButton_1")
        self.buttonGroup.addButton(self.my_radioButton_1)
        self.gridLayout_2.addWidget(self.my_radioButton_1, 1, 1, 1, 1)
        self.my_radioButton_2 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_2.setObjectName("my_radioButton_2")
        self.buttonGroup.addButton(self.my_radioButton_2)
        self.gridLayout_2.addWidget(self.my_radioButton_2, 2, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.page_1)
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 2, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.page_1)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 1, 0, 1, 1)
        self.label_1 = QtWidgets.QLabel(self.page_1)
        self.label_1.setObjectName("label_1")
        self.gridLayout_2.addWidget(self.label_1, 0, 0, 1, 1)
        self.my_radioButton_0 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_0.setObjectName("my_radioButton_0")
        self.buttonGroup.addButton(self.my_radioButton_0)
        self.gridLayout_2.addWidget(self.my_radioButton_0, 0, 1, 1, 1)
        self.my_radioButton_4 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_4.setObjectName("my_radioButton_4")
        self.buttonGroup.addButton(self.my_radioButton_4)
        self.gridLayout_2.addWidget(self.my_radioButton_4, 4, 1, 1, 1)
        self.label_14 = QtWidgets.QLabel(self.page_1)
        self.label_14.setObjectName("label_14")
        self.gridLayout_2.addWidget(self.label_14, 4, 0, 1, 1)
        self.label_15 = QtWidgets.QLabel(self.page_1)
        self.label_15.setObjectName("label_15")
        self.gridLayout_2.addWidget(self.label_15, 5, 0, 1, 1)
        self.my_radioButton_5 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_5.setObjectName("my_radioButton_5")
        self.buttonGroup.addButton(self.my_radioButton_5)
        self.gridLayout_2.addWidget(self.my_radioButton_5, 5, 1, 1, 1)
        self.verticalLayout_8.addLayout(self.gridLayout_2)
        self.question_label_1 = QtWidgets.QLabel(self.page_1)
        self.question_label_1.setStyleSheet("font: 63 9pt \"Segoe UI Semibold\";")
        self.question_label_1.setObjectName("question_label_1")
        self.verticalLayout_8.addWidget(self.question_label_1)
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.my_radioButton_9 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_9.setObjectName("my_radioButton_9")
        self.buttonGroup_2 = QtWidgets.QButtonGroup(MainWindow)
        self.buttonGroup_2.setObjectName("buttonGroup_2")
        self.buttonGroup_2.addButton(self.my_radioButton_9)
        self.gridLayout_8.addWidget(self.my_radioButton_9, 3, 1, 1, 1)
        self.my_radioButton_7 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_7.setObjectName("my_radioButton_7")
        self.buttonGroup_2.addButton(self.my_radioButton_7)
        self.gridLayout_8.addWidget(self.my_radioButton_7, 1, 1, 1, 1)
        self.label_26 = QtWidgets.QLabel(self.page_1)
        self.label_26.setObjectName("label_26")
        self.gridLayout_8.addWidget(self.label_26, 3, 0, 1, 1)
        self.my_radioButton_10 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_10.setObjectName("my_radioButton_10")
        self.buttonGroup_2.addButton(self.my_radioButton_10)
        self.gridLayout_8.addWidget(self.my_radioButton_10, 4, 1, 1, 1)
        self.label_29 = QtWidgets.QLabel(self.page_1)
        self.label_29.setObjectName("label_29")
        self.gridLayout_8.addWidget(self.label_29, 0, 0, 1, 1)
        self.label_30 = QtWidgets.QLabel(self.page_1)
        self.label_30.setObjectName("label_30")
        self.gridLayout_8.addWidget(self.label_30, 4, 0, 1, 1)
        self.my_radioButton_8 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_8.setObjectName("my_radioButton_8")
        self.buttonGroup_2.addButton(self.my_radioButton_8)
        self.gridLayout_8.addWidget(self.my_radioButton_8, 2, 1, 1, 1)
        self.label_28 = QtWidgets.QLabel(self.page_1)
        self.label_28.setObjectName("label_28")
        self.gridLayout_8.addWidget(self.label_28, 1, 0, 1, 1)
        self.my_radioButton_6 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_6.setObjectName("my_radioButton_6")
        self.buttonGroup_2.addButton(self.my_radioButton_6)
        self.gridLayout_8.addWidget(self.my_radioButton_6, 0, 1, 1, 1)
        self.label_31 = QtWidgets.QLabel(self.page_1)
        self.label_31.setObjectName("label_31")
        self.gridLayout_8.addWidget(self.label_31, 5, 0, 1, 1)
        self.my_radioButton_11 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_11.setObjectName("my_radioButton_11")
        self.buttonGroup_2.addButton(self.my_radioButton_11)
        self.gridLayout_8.addWidget(self.my_radioButton_11, 5, 1, 1, 1)
        self.label_27 = QtWidgets.QLabel(self.page_1)
        self.label_27.setObjectName("label_27")
        self.gridLayout_8.addWidget(self.label_27, 2, 0, 1, 1)
        self.verticalLayout_8.addLayout(self.gridLayout_8)
        self.question_label_3 = QtWidgets.QLabel(self.page_1)
        self.question_label_3.setStyleSheet("font: 63 9pt \"Segoe UI Semibold\";")
        self.question_label_3.setObjectName("question_label_3")
        self.verticalLayout_8.addWidget(self.question_label_3)
        self.gridLayout_9 = QtWidgets.QGridLayout()
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.label_34 = QtWidgets.QLabel(self.page_1)
        self.label_34.setObjectName("label_34")
        self.gridLayout_9.addWidget(self.label_34, 1, 0, 1, 1)
        self.my_radioButton_12 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_12.setObjectName("my_radioButton_12")
        self.buttonGroup_3 = QtWidgets.QButtonGroup(MainWindow)
        self.buttonGroup_3.setObjectName("buttonGroup_3")
        self.buttonGroup_3.addButton(self.my_radioButton_12)
        self.gridLayout_9.addWidget(self.my_radioButton_12, 0, 1, 1, 1)
        self.label_37 = QtWidgets.QLabel(self.page_1)
        self.label_37.setObjectName("label_37")
        self.gridLayout_9.addWidget(self.label_37, 5, 0, 1, 1)
        self.my_radioButton_13 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_13.setObjectName("my_radioButton_13")
        self.buttonGroup_3.addButton(self.my_radioButton_13)
        self.gridLayout_9.addWidget(self.my_radioButton_13, 1, 1, 1, 1)
        self.label_33 = QtWidgets.QLabel(self.page_1)
        self.label_33.setObjectName("label_33")
        self.gridLayout_9.addWidget(self.label_33, 2, 0, 1, 1)
        self.label_36 = QtWidgets.QLabel(self.page_1)
        self.label_36.setObjectName("label_36")
        self.gridLayout_9.addWidget(self.label_36, 4, 0, 1, 1)
        self.my_radioButton_17 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_17.setObjectName("my_radioButton_17")
        self.buttonGroup_3.addButton(self.my_radioButton_17)
        self.gridLayout_9.addWidget(self.my_radioButton_17, 5, 1, 1, 1)
        self.label_32 = QtWidgets.QLabel(self.page_1)
        self.label_32.setObjectName("label_32")
        self.gridLayout_9.addWidget(self.label_32, 3, 0, 1, 1)
        self.my_radioButton_16 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_16.setObjectName("my_radioButton_16")
        self.buttonGroup_3.addButton(self.my_radioButton_16)
        self.gridLayout_9.addWidget(self.my_radioButton_16, 4, 1, 1, 1)
        self.label_35 = QtWidgets.QLabel(self.page_1)
        self.label_35.setObjectName("label_35")
        self.gridLayout_9.addWidget(self.label_35, 0, 0, 1, 1)
        self.my_radioButton_14 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_14.setObjectName("my_radioButton_14")
        self.buttonGroup_3.addButton(self.my_radioButton_14)
        self.gridLayout_9.addWidget(self.my_radioButton_14, 2, 1, 1, 1)
        self.my_radioButton_15 = QtWidgets.QRadioButton(self.page_1)
        self.my_radioButton_15.setObjectName("my_radioButton_15")
        self.buttonGroup_3.addButton(self.my_radioButton_15)
        self.gridLayout_9.addWidget(self.my_radioButton_15, 3, 1, 1, 1)
        self.verticalLayout_8.addLayout(self.gridLayout_9)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem3)
        self.sublime_pushButton_0 = QtWidgets.QPushButton(self.page_1)
        self.sublime_pushButton_0.setObjectName("sublime_pushButton_0")
        self.horizontalLayout_11.addWidget(self.sublime_pushButton_0)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem4)
        self.horizontalLayout_11.setStretch(0, 10)
        self.horizontalLayout_11.setStretch(1, 1)
        self.horizontalLayout_11.setStretch(2, 1)
        self.verticalLayout_8.addLayout(self.horizontalLayout_11)
        self.stackedWidget.addWidget(self.page_1)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.page_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem5)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem6)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.comboBox_4 = QtWidgets.QComboBox(self.page_2)
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_4, 5, 2, 1, 1)
        self.input_label_6 = QtWidgets.QLabel(self.page_2)
        self.input_label_6.setObjectName("input_label_6")
        self.gridLayout_3.addWidget(self.input_label_6, 6, 0, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(self.page_2)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_2, 3, 2, 1, 1)
        self.input_label_4 = QtWidgets.QLabel(self.page_2)
        self.input_label_4.setObjectName("input_label_4")
        self.gridLayout_3.addWidget(self.input_label_4, 4, 0, 1, 1)
        self.input_label_1 = QtWidgets.QLabel(self.page_2)
        self.input_label_1.setObjectName("input_label_1")
        self.gridLayout_3.addWidget(self.input_label_1, 1, 0, 1, 1)
        self.comboBox_0 = QtWidgets.QComboBox(self.page_2)
        self.comboBox_0.setObjectName("comboBox_0")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.comboBox_0.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_0, 1, 2, 1, 1)
        self.comboBox_1 = QtWidgets.QComboBox(self.page_2)
        self.comboBox_1.setObjectName("comboBox_1")
        self.comboBox_1.addItem("")
        self.comboBox_1.addItem("")
        self.comboBox_1.addItem("")
        self.comboBox_1.addItem("")
        self.comboBox_1.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_1, 2, 2, 1, 1)
        self.input_label_3 = QtWidgets.QLabel(self.page_2)
        self.input_label_3.setObjectName("input_label_3")
        self.gridLayout_3.addWidget(self.input_label_3, 3, 0, 1, 2)
        self.comboBox_3 = QtWidgets.QComboBox(self.page_2)
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_3, 4, 2, 1, 1)
        self.input_label_5 = QtWidgets.QLabel(self.page_2)
        self.input_label_5.setObjectName("input_label_5")
        self.gridLayout_3.addWidget(self.input_label_5, 5, 0, 1, 1)
        self.comboBox_5 = QtWidgets.QComboBox(self.page_2)
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.gridLayout_3.addWidget(self.comboBox_5, 6, 2, 1, 1)
        self.input_lineEdit_0 = QtWidgets.QLineEdit(self.page_2)
        self.input_lineEdit_0.setObjectName("input_lineEdit_0")
        self.gridLayout_3.addWidget(self.input_lineEdit_0, 0, 2, 1, 1)
        self.input_label_0 = QtWidgets.QLabel(self.page_2)
        self.input_label_0.setObjectName("input_label_0")
        self.gridLayout_3.addWidget(self.input_label_0, 0, 0, 1, 1)
        self.input_label_2 = QtWidgets.QLabel(self.page_2)
        self.input_label_2.setObjectName("input_label_2")
        self.gridLayout_3.addWidget(self.input_label_2, 2, 0, 1, 2)
        self.gridLayout_3.setColumnStretch(0, 5)
        self.horizontalLayout_4.addLayout(self.gridLayout_3)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem7)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem8)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem9)
        self.textEdit_0 = QtWidgets.QTextEdit(self.page_2)
        self.textEdit_0.setObjectName("textEdit_0")
        self.horizontalLayout_5.addWidget(self.textEdit_0)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem10)
        self.horizontalLayout_5.setStretch(0, 1)
        self.horizontalLayout_5.setStretch(1, 3)
        self.horizontalLayout_5.setStretch(2, 1)
        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        spacerItem11 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem11)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem12)
        self.pushButton_0 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_0.setObjectName("pushButton_0")
        self.horizontalLayout.addWidget(self.pushButton_0)
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem13)
        self.pushButton_1 = QtWidgets.QPushButton(self.page_2)
        self.pushButton_1.setMaximumSize(QtCore.QSize(65, 32))
        self.pushButton_1.setObjectName("pushButton_1")
        self.horizontalLayout.addWidget(self.pushButton_1)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem14)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.verticalLayout_3.setStretch(0, 1)
        self.verticalLayout_3.setStretch(1, 4)
        self.verticalLayout_3.setStretch(2, 1)
        self.verticalLayout_3.setStretch(3, 4)
        self.verticalLayout_3.setStretch(4, 1)
        self.verticalLayout_3.setStretch(5, 2)
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.page_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.tableWidget = QtWidgets.QTableWidget(self.page_3)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.verticalLayout_4.addWidget(self.tableWidget)
        spacerItem15 = QtWidgets.QSpacerItem(20, 62, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem15)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem16 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem16)
        self.show_pushButton = QtWidgets.QPushButton(self.page_3)
        self.show_pushButton.setObjectName("show_pushButton")
        self.horizontalLayout_6.addWidget(self.show_pushButton)
        spacerItem17 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem17)
        self.horizontalLayout_6.setStretch(0, 10)
        self.horizontalLayout_6.setStretch(1, 1)
        self.horizontalLayout_6.setStretch(2, 1)
        self.verticalLayout_4.addLayout(self.horizontalLayout_6)
        self.verticalLayout_4.setStretch(0, 10)
        self.verticalLayout_4.setStretch(1, 1)
        self.verticalLayout_4.setStretch(2, 1)
        self.stackedWidget.addWidget(self.page_3)
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.label_38 = QtWidgets.QLabel(self.page)
        self.label_38.setGeometry(QtCore.QRect(450, 320, 81, 18))
        self.label_38.setObjectName("label_38")
        self.stackedWidget.addWidget(self.page)
        self.horizontalLayout_2.addWidget(self.stackedWidget)
        self.horizontalLayout_2.setStretch(0, 1)
        self.horizontalLayout_2.setStretch(1, 10)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 20)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1401, 30))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(2)
        self.listWidget_0.currentRowChanged['int'].connect(self.stackedWidget.setCurrentIndex)
        self.sublime_pushButton_0.clicked.connect(self.submit_importance)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.my_radioButton_0, self.my_radioButton_1)
        MainWindow.setTabOrder(self.my_radioButton_1, self.my_radioButton_2)
        MainWindow.setTabOrder(self.my_radioButton_2, self.my_radioButton_3)
        MainWindow.setTabOrder(self.my_radioButton_3, self.my_radioButton_4)
        MainWindow.setTabOrder(self.my_radioButton_4, self.my_radioButton_5)
        MainWindow.setTabOrder(self.my_radioButton_5, self.my_radioButton_6)
        MainWindow.setTabOrder(self.my_radioButton_6, self.my_radioButton_7)
        MainWindow.setTabOrder(self.my_radioButton_7, self.my_radioButton_8)
        MainWindow.setTabOrder(self.my_radioButton_8, self.my_radioButton_9)
        MainWindow.setTabOrder(self.my_radioButton_9, self.my_radioButton_10)
        MainWindow.setTabOrder(self.my_radioButton_10, self.my_radioButton_11)
        MainWindow.setTabOrder(self.my_radioButton_11, self.my_radioButton_12)
        MainWindow.setTabOrder(self.my_radioButton_12, self.my_radioButton_13)
        MainWindow.setTabOrder(self.my_radioButton_13, self.my_radioButton_14)
        MainWindow.setTabOrder(self.my_radioButton_14, self.my_radioButton_15)
        MainWindow.setTabOrder(self.my_radioButton_15, self.my_radioButton_16)
        MainWindow.setTabOrder(self.my_radioButton_16, self.my_radioButton_17)
        MainWindow.setTabOrder(self.my_radioButton_17, self.sublime_pushButton_0)
        MainWindow.setTabOrder(self.sublime_pushButton_0, self.input_lineEdit_0)
        MainWindow.setTabOrder(self.input_lineEdit_0, self.comboBox_0)
        MainWindow.setTabOrder(self.comboBox_0, self.comboBox_1)
        MainWindow.setTabOrder(self.comboBox_1, self.comboBox_2)
        MainWindow.setTabOrder(self.comboBox_2, self.comboBox_3)
        MainWindow.setTabOrder(self.comboBox_3, self.comboBox_4)
        MainWindow.setTabOrder(self.comboBox_4, self.comboBox_5)
        MainWindow.setTabOrder(self.comboBox_5, self.textEdit_0)
        MainWindow.setTabOrder(self.textEdit_0, self.pushButton_0)
        MainWindow.setTabOrder(self.pushButton_0, self.pushButton_1)
        MainWindow.setTabOrder(self.pushButton_1, self.tableWidget)
        MainWindow.setTabOrder(self.tableWidget, self.listWidget_0)
        MainWindow.setTabOrder(self.listWidget_0, self.show_pushButton)

        self.add_function()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "CBR interface"))
        __sortingEnabled = self.listWidget_0.isSortingEnabled()
        self.listWidget_0.setSortingEnabled(False)
        item = self.listWidget_0.item(0)
        item.setText(_translate("MainWindow", "界面"))
        item = self.listWidget_0.item(1)
        item.setText(_translate("MainWindow", "喜爱偏好"))
        item = self.listWidget_0.item(2)
        item.setText(_translate("MainWindow", "输入预期"))
        item = self.listWidget_0.item(3)
        item.setText(_translate("MainWindow", "结果推荐"))
        item = self.listWidget_0.item(4)
        item.setText(_translate("MainWindow", "其他"))
        self.listWidget_0.setSortingEnabled(__sortingEnabled)
        self.title_label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:18pt; font-weight:600; font-style:italic; color:#55aaff;\">Welcome to CBR programme</span></p></body></html>"))
        self.question_label_0.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-style:italic;\">Which of the following attributes do you think is the most important?</span></p></body></html>"))
        self.my_radioButton_3.setText(_translate("MainWindow", "RadioButton"))
        self.label_4.setText(_translate("MainWindow", "construction time"))
        self.my_radioButton_1.setText(_translate("MainWindow", "RadioButton"))
        self.my_radioButton_2.setText(_translate("MainWindow", "RadioButton"))
        self.label_3.setText(_translate("MainWindow", "possibility for condensation"))
        self.label_2.setText(_translate("MainWindow", "insualtion capacity"))
        self.label_1.setText(_translate("MainWindow", "Complexity"))
        self.my_radioButton_0.setText(_translate("MainWindow", "RadioButton"))
        self.my_radioButton_4.setText(_translate("MainWindow", "RadioButton"))
        self.label_14.setText(_translate("MainWindow", "Coagulability"))
        self.label_15.setText(_translate("MainWindow", "Coagulability"))
        self.my_radioButton_5.setText(_translate("MainWindow", "RadioButton"))
        self.question_label_1.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-style:italic;\">Which of the following attributes do you think is the second important?</span></p></body></html>"))
        self.my_radioButton_9.setText(_translate("MainWindow", "RadioButton"))
        self.my_radioButton_7.setText(_translate("MainWindow", "RadioButton"))
        self.label_26.setText(_translate("MainWindow", "construction time"))
        self.my_radioButton_10.setText(_translate("MainWindow", "RadioButton"))
        self.label_29.setText(_translate("MainWindow", "Complexity"))
        self.label_30.setText(_translate("MainWindow", "Coagulability"))
        self.my_radioButton_8.setText(_translate("MainWindow", "RadioButton"))
        self.label_28.setText(_translate("MainWindow", "insualtion capacity"))
        self.my_radioButton_6.setText(_translate("MainWindow", "RadioButton"))
        self.label_31.setText(_translate("MainWindow", "Coagulability"))
        self.my_radioButton_11.setText(_translate("MainWindow", "RadioButton"))
        self.label_27.setText(_translate("MainWindow", "possibility for condensation"))
        self.question_label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt; font-style:italic;\">Which of the following attributes do you think is the least important?</span></p></body></html>"))
        self.label_34.setText(_translate("MainWindow", "insualtion capacity"))
        self.my_radioButton_12.setText(_translate("MainWindow", "RadioButton"))
        self.label_37.setText(_translate("MainWindow", "Coagulability"))
        self.my_radioButton_13.setText(_translate("MainWindow", "RadioButton"))
        self.label_33.setText(_translate("MainWindow", "possibility for condensation"))
        self.label_36.setText(_translate("MainWindow", "Coagulability"))
        self.my_radioButton_17.setText(_translate("MainWindow", "RadioButton"))
        self.label_32.setText(_translate("MainWindow", "construction time"))
        self.my_radioButton_16.setText(_translate("MainWindow", "RadioButton"))
        self.label_35.setText(_translate("MainWindow", "Complexity"))
        self.my_radioButton_14.setText(_translate("MainWindow", "RadioButton"))
        self.my_radioButton_15.setText(_translate("MainWindow", "RadioButton"))
        self.sublime_pushButton_0.setText(_translate("MainWindow", "submit"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "very low"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "low"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "medium"))
        self.comboBox_4.setItemText(3, _translate("MainWindow", "high"))
        self.comboBox_4.setItemText(4, _translate("MainWindow", "very high"))
        self.input_label_6.setText(_translate("MainWindow", "pattern"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "very low"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "low"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "medium"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "high"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "very high"))
        self.input_label_4.setText(_translate("MainWindow", "construction time"))
        self.input_label_1.setText(_translate("MainWindow", "Complexity"))
        self.comboBox_0.setItemText(0, _translate("MainWindow", "very low"))
        self.comboBox_0.setItemText(1, _translate("MainWindow", "low"))
        self.comboBox_0.setItemText(2, _translate("MainWindow", "medium"))
        self.comboBox_0.setItemText(3, _translate("MainWindow", "high"))
        self.comboBox_0.setItemText(4, _translate("MainWindow", "very high"))
        self.comboBox_1.setItemText(0, _translate("MainWindow", "very low"))
        self.comboBox_1.setItemText(1, _translate("MainWindow", "low"))
        self.comboBox_1.setItemText(2, _translate("MainWindow", "medium"))
        self.comboBox_1.setItemText(3, _translate("MainWindow", "high"))
        self.comboBox_1.setItemText(4, _translate("MainWindow", "very high"))
        self.input_label_3.setText(_translate("MainWindow", "possibility for condensation"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "very low"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "low"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "medium"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "high"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "very high"))
        self.input_label_5.setText(_translate("MainWindow", "fuzzy evaluation"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "ventilation"))
        self.comboBox_5.setItemText(1, _translate("MainWindow", "solar collector"))
        self.comboBox_5.setItemText(2, _translate("MainWindow", "solar power"))
        self.comboBox_5.setItemText(3, _translate("MainWindow", "ventilation; solar collector\n"
""))
        self.comboBox_5.setItemText(4, _translate("MainWindow", "ventilation;solar power\n"
""))
        self.comboBox_5.setItemText(5, _translate("MainWindow", "solar collector;solar power\n"
""))
        self.comboBox_5.setItemText(6, _translate("MainWindow", "ventilation;solar collector;solar power\n"
""))
        self.input_label_0.setText(_translate("MainWindow", "Case Name"))
        self.input_label_2.setText(_translate("MainWindow", "insulation capacity"))
        self.pushButton_0.setText(_translate("MainWindow", "execute"))
        self.pushButton_1.setText(_translate("MainWindow", "add"))
        self.show_pushButton.setText(_translate("MainWindow", "show"))
        self.label_38.setText(_translate("MainWindow", "TextLabel"))

    def add_function(self):
        self.case = {'name':'test', 'U value': 1, 'comlexity':'very low', 'insulation capacity':'very low', 'possibility for condenstation':'very low', 'construction time': 'very low', 'fuzzy evaluation': 'very low', 'pattern': 'ventilation'}
        self.line = []
        self.importance = {'comlexity': 2, 'insulation capacity': 2, 'possibility for condenstation': 2, 'construction time': 3,  'pattern': 3}
        self.icnt = 0

        # sys.stdout = EmittingStr(textWritten=self.set_logging_func) # 输出重定向
        # sys.stderr = EmittingStr(textWritten=self.set_logging_func)

        self.buttonGroup.buttonClicked.connect(self.choose_importance)
        self.buttonGroup_2.buttonClicked.connect(self.choose_importance)
        self.buttonGroup_3.buttonClicked.connect(self.choose_importance)
        # self.sublime_pushButton_0.clicked.connect(self.submit_importance)
        
        self.comboBox_0.currentIndexChanged[str].connect(self.add_case_value)
        self.comboBox_1.currentIndexChanged[str].connect(self.add_case_value)
        self.comboBox_2.currentIndexChanged[str].connect(self.add_case_value)
        self.comboBox_3.currentIndexChanged[str].connect(self.add_case_value)
        self.comboBox_4.currentIndexChanged[str].connect(self.add_case_value)
        self.comboBox_5.currentIndexChanged[str].connect(self.add_case_value)


        self.pushButton_0.clicked.connect(lambda: self.execute())
        self.pushButton_1.clicked.connect(lambda: self.add_case())
    
        self.show_pushButton.clicked.connect(self.show_table)
    
    def choose_importance(self):
        sender = self.sender()
        if sender == self.buttonGroup:
            print(self.buttonGroup.checkedId())
            if self.buttonGroup.checkedId() == -5:
                self.importance['comlexity'] = 0
            elif self.buttonGroup.checkedId() == -3:
                self.importance['insulation capacity'] = 0
            elif self.buttonGroup.checkedId() == -4:
                self.importance['possibility for condenstation'] = 0
            elif self.buttonGroup.checkedId() == -2:
                self.importance['construction time'] = 0
            elif self.buttonGroup.checkedId() == -6:
                self.importance['pattern'] = 0
            print('group 0')          
        elif sender == self.buttonGroup_2:
            print(self.buttonGroup_2.checkedId())
            if self.buttonGroup.checkedId() == -6:
                self.importance['comlexity'] = 1
            elif self.buttonGroup.checkedId() == -3:
                self.importance['insulation capacity'] = 1
            elif self.buttonGroup.checkedId() == -5:
                self.importance['possibility for condenstation'] = 1
            elif self.buttonGroup.checkedId() == -2:
                self.importance['construction time'] = 1
            elif self.buttonGroup.checkedId() == -4:
                self.importance['pattern'] = 1 
            print('group 2') 
        elif sender == self.buttonGroup_3:
            print(self.buttonGroup_3.checkedId())
            if self.buttonGroup.checkedId() == -2:
                self.importance['comlexity'] = 4
            elif self.buttonGroup.checkedId() == -3:
                self.importance['insulation capacity'] = 4
            elif self.buttonGroup.checkedId() == -6:
                self.importance['possibility for condenstation'] = 4
            elif self.buttonGroup.checkedId() == -7:
                self.importance['construction time'] = 4
            elif self.buttonGroup.checkedId() == -5:
                self.importance['pattern'] = 4
            print('group 3') 

    def submit_importance(self):
        # bflag = True
        # for key,value in self.importance.items():
        #     if value != 3:
        #         bflag = False
        print(self.importance)
        # if bflag == True:
            
        # else：
        

    def add_case_value(self, str):
        sender = self.sender()
        if sender == self.comboBox_0:
                self.case['comlexity'] = str
        elif sender == self.comboBox_1:
                self.case['insulation capacity'] = str
        elif sender == self.comboBox_2:
                self.case['possibility for condenstation'] = str  
        elif sender == self.comboBox_3:
                self.case['construction time'] = str              
        elif sender == self.comboBox_4:
                self.case['fuzzy evalution'] = str
        elif sender == self.comboBox_5:
                self.case['pattern'] = str
                print(self.case)   
#     def add_case_value_2(self, str):
#         self.case['insulation capacity'] = str
#         print(str)
    
#     def add_case_value_3(self, str):
#         self.case['possibility for condenstation'] = str
#         print(str)
    def set_logging_func(self, text):
        cursor = self.textEdit_0.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(text)
        self.textEdit_0.setTextCursor(cursor)
        self.textEdit_0.ensureCursorVisible()

    def execute(self):

        self.thread = Worker(self.case, self.importance) # 用来执行异步显示
        print(dir(self.thread))
        self.thread.my_signal.connect(self.set_logging_func)
        self.thread.start()
        print("1")
        tx1 = self.input_lineEdit_0.text() 
        # tx2 = self.input_lineEdit_1.text() 
        if tx1 != '':
           self.case['name'] = tx1
        # if tx2 != '':
        #    self.case['U value'] = tx2
        print('target case is {}'.format(self.case))
        time.sleep(1)
        #execute.execute_programme(self.case, self.importance)
        print("program execution completed")
        
        print("the results is imported into Case-to-Case_vl_Result.xlsx")
        
    def set_logging_func(self,line):
        if self.icnt >= 1024 :
            self.textEdit_0.setText("")
            self.icnt  = 0
        self.textEdit_0.append(line)
        self.icnt = self.icnt + 1
    
    def add_case(self):
        self.logger_info('adding case')
        tx1 = self.input_lineEdit_0.text() 
        # tx2 = self.input_lineEdit_1.text() 
        if tx1 != '':
           self.case['name'] = tx1
        # if tx2 != '':
        #    self.case['U value'] = tx2
        self.logger_info('new case is {}'.format(self.case))
        execute.add_to_database(xlsx_filename, 0, self.case)
        # QMessageBox.about(self, 'Message', 'Successfully add new case to database')
        self.logger_info('Successfully add new case to database')
    
    def logger_info(self, log):
        self.textEdit_0.append(log)



    def show_table(self):
    ###===========读取表格，转换表格，===========================================
        path_openfile_name = 'Case-to-Case_v2_Result.xlsx'
        if len(path_openfile_name) > 0:
            input_table = pd.read_excel(path_openfile_name)
        #print(input_table)
            input_table_rows = input_table.shape[0]
            input_table_colunms = input_table.shape[1]

            input_table_header = input_table.columns.values.tolist()
            input_table_header[0] = 'case name'
            print(input_table_header)

        ###===========读取表格，转换表格，============================================
        ###======================给tablewidget设置行列表头============================

            self.tableWidget.setColumnCount(input_table_colunms)
            self.tableWidget.setRowCount(input_table_rows)
            self.tableWidget.setHorizontalHeaderLabels(input_table_header)
            self.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)  # 设置只能选中一行
            self.tableWidget.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)#所有列自动拉伸，充满界面
            self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)  # can't change

            self.tableWidget.resizeColumnsToContents()#设置列宽高按照内容自适应
            self.tableWidget.resizeRowsToContents()#设置行宽和高按照内容自适应

            #self.tableWidget.horizontalHeader().setSectionResizeMode(7,QHeaderView.Stretch)#设置第五列宽度自动调整，充满屏幕

        ###======================给tablewidget设置行列表头============================

        ###================遍历表格每个元素，同时添加到tablewidget中========================
            for i in range(input_table_rows):
                input_table_rows_values = input_table.iloc[[i]]
                #print(input_table_rows_values)
                input_table_rows_values_array = np.array(input_table_rows_values)
                input_table_rows_values_list = input_table_rows_values_array.tolist()[0]
            #print(input_table_rows_values_list)
                for j in range(input_table_colunms):
                    input_table_items_list = input_table_rows_values_list[j]
                #print(input_table_items_list)
                # print(type(input_table_items_list))

        ###==============将遍历的元素添加到tablewidget中并显示=======================

                    input_table_items = str(input_table_items_list)
                    newItem = QTableWidgetItem(input_table_items) 
                    newItem.setTextAlignment(Qt.AlignHCenter|Qt.AlignVCenter)
                    self.tableWidget.setItem(i, j, newItem)  

        ###================遍历表格每个元素，同时添加到tablewidget中========================
        else:
            self.page_3.show()
            #self.centralWidget.show()
     
    def openimage(self):
        imgName, imgType = QFileDialog.getOpenFileName(self, "打开图片", "", "*.jpg;;*.png;;All Files(*)")
        jpg = QtGui.QPixmap(imgName).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(jpg)
    
    def child_show(self, row, col):
        print(row)
        print(col)



class Worker(QThread):
    my_signal = pyqtSignal(str)

    def __init__(self, case, importance):
        super(Worker, self).__init__()
        self.case = case
        self.importance = importance
    
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
    def execute_programme(case, importance): #input_a 和 input_b 为list
    
        crisp_index = []
        fuzzy_index = []
        serial = []
        
        df_db = read_database('database_v2.xlsx', 0)

        for val in case.values():
            serial.append(val)
        serial = serial[2:6] + serial[7:]
        print(serial)
        #serial.pop(0, 1, 6) #remove name, U value, fuzzy
        serial = np.array(serial)

        # ahp_file_name = select_ahp_matrix(importance)
        df_ahp = pd.read_excel(ahp_file_name, index_col=0)  # AHP的判断矩阵，数据类型为DataFrame
        a_weight = AHP.ahp(df_ahp)
        a_weight = ahp_weight_process(importance, a_weight)
        # df_b = pd.read_excel('matrixB.xlsx', index_col=0)  # AHP的判断矩阵，数据类型为DataFrame
        # b_weight = AHP.ahp(df_b)

        # df_t = pd.read_excel('matrix0.xlsx', index_col=0)
        # t_weight = AHP.ahp(df_t)

        # a_weight = t_weight[0] * a_weight
        # b_weight = t_weight[1] * b_weight

        # subject_weight = np.append(a_weight, b_weight)  # AHP求得的主观权重
        subject_weight = np.array(a_weight)
        print("主观权重", type(subject_weight), subject_weight)

        df_e = pd.read_excel('database_v2.xlsx', index_col=0)  # 案例数据库导入
        print(df_e)
        df_convert = df_e.drop(labels= ['U value', 'fuzzy evaluation'], axis=1,inplace=False)  # 需要转化的df 
        df_e = Topsis.convert_grades(df_convert)
        # print("经历了convert后的")
        # print(df_e)

        #df_e.insert(0,'U value',df_db.pop('U value'))

        # print("重新插入")
        print(df_e)
        object_weight = Topsis.calculate_entropyweight(df_e)  # topsis求得客观权重
        print("客观权重", type(object_weight), object_weight)
        
        # df_db = read_database('database_v2.xlsx', 0)
        print("数据库： \n",df_db)

        k = judge_categorical_attributes(serial, df_convert)
        s_data = judge_crisp_attributes(serial, df_convert, crisp_index, k)
        # print(s_data)
        # f_data = judge_fuzzy_attributes(input_a, df, s_data)
        (a, b) = calculate_parameter(s_data, subject_weight, object_weight)
        print("计算得到的参数a和b：", a, b)

        g_weight = a * subject_weight + b * object_weight
        print("最终权重：", g_weight)
        # print(df_e)
        # print(serial)
    #    temp = serial[0]
        serial = pd.DataFrame(serial)
        serial = Topsis.convert_grades(serial)
        serial = np.array(serial)
        # serial[0] = temp
        print(serial)
        print_result(g_weight, df_e, serial)
        return a, b


    def updateefuse(self):
        url = ''
        bflag = False
        try:
            self.my_signal.emit('test is starting')

            wpath = os.path.split(os.path.abspath(__file__))[0]
            #cmd = "{}/{} {}".format(wpath,"runefuse.sh",globalconfig)
            #cmd = "{} {}\{} {} {}".format('python',wpath,"python execute.py", self.case, self.importance)
            cmd = "{} {}\{} {} {}".format('python',wpath,"execute.py", self.case, self.importance)
            print(cmd)
            proc = subprocess.Popen(args=[cmd],
                                shell=True,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT,
                                bufsize=1)

            while proc.poll() is None:
                for line in iter(proc.stdout.readline, b''):
                    line = line.decode('UTF-8', "ignore")
                    #s1 = str(line, encoding='gbk')
                   # line = line.decode('gbk')
                    if line.find("raise Exception") >=0 :
                       raise Exception("update fail")
                    self.my_signal.emit(str(line))

                    # if line.find("efuse Number is:") >=0 :
                    #     temp = line[line.find("efuse Number is:") + 16:]
                    #     self.my_signal2.emit(temp)
                    

        except Exception as e:
            # self.my_signal3.emit("FAIL")
            # save_updatedate()
            raise Exception(e)
            #self.Ui_MainWindow.textEdit_logging.append(e.message)
            #self.Ui_MainWindow.textEdit_result.setText('<font color=\"#FF0000\">FAIL</font>')

    def run(self):

        wpath = os.path.split(os.path.abspath(__file__))[0]
        print(wpath)
        self.my_signal.emit('target case is {}'.format(self.case))
        time.sleep(1)
        #execute.execute_programme(self.case, self.importance)
        self.my_signal.emit("program execution completed")
        df_e = pd.read_excel('database_v2.xlsx', index_col=0)
        #self.my_signal.emit()
        #self.updateefuse()
        execute.execute_programme(self.case, self.importance)
        self.my_signal.emit("the results is imported into Case-to-Case_vl_Result.xlsx")
        self.my_signal.emit("Wating")